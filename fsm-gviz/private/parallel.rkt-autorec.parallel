#lang racket
(require "lib.rkt")

(define (parallelize-shell func args) (let* [
                                             (system-os (system-type 'os))
                                             (cpu-cores (cond [(eq? system-os 'unix) (begin
                                                                                       (define p (process "grep -c '^processor' /proc/cpuinfo"))
                                                                                       (define event-result (string->number (sync (read-line-evt (first p)))))
                                                                                       event-result
                                                                                       )
                                                                                     ]
                                                              [(eq? system-os 'windows) ]
                                                              [(eq? system-os 'macos) ]
                                                              )
                                                        )
                                             (cpu-cores-avail (make-semaphore cpu-cores))
                                             ]
                              (for/list ([a args])
                                (semaphore-wait cpu-cores-avail)
                                (define shell-process (func a))
                                (thread (lambda () (let [
                                                         (result (sync (read-line-evt (first shell-process))))
                                                         ]
                                                     (if (= 0 (string->number result))
                                                         ;; This is thrown away, just doing this for the error check
                                                         result
                                                         (error (format "Graphviz produced an error while compiling the graphs: ~a" result))
                                                         )
                                                     )
                                          (close-input-port (first shell-process))
                                          (close-output-port (second shell-process))
                                          (close-input-port (fourth shell-process))
                                          (semaphore-post cpu-cores-avail)
                                          )
                                        )
                                )
                              )
  )

(define (hash->bytes hash fmtr (spacer ", "))

  ;; Purpose: Formats a possibly boolean value to a symbol
  (define (fmt-val val)
    (if (boolean? val)
        (if val
            'true
            'false)
        val
        )
    )
  
  (define (key-val->bytes key value)
    ;(: fmtr-fun (U Procedure Boolean) : Procedure)
    (define fmtr-fun (hash-ref fmtr key #f))
    (if (procedure? fmtr-fun)
        (let ([o (open-output-bytes)])
          (fprintf o "~s=~s" key (fmt-val value))
          (get-output-bytes o))
        (let ([o (open-output-bytes)])
          (fprintf o "~s=~s" key (if (equal? key 'label)
                                     (let ([o (open-output-string)])
                                       (fprintf o "~a" (fmt-val value))
                                       (get-output-string o))
                                     (fmt-val value))
                   )
          (get-output-bytes o))
        )
    )
  (bytes-join (hash-map hash key-val->bytes) (string->bytes/locale spacer))
  )

(define (edge->bytes edge fmtr)
  (let ([o (open-output-bytes)])
    (fprintf o "    ~s -> ~s [~a];\n" (edge-start-node edge) (edge-end-node edge) (hash->str (edge-atb edge) fmtr))
    (get-output-bytes o))
  )

(define (node->bytes node fmtr-node)
  (let ([o (open-output-bytes)])
          (fprintf o "    ~s [~a];\n" (node-name node) (hash->str (node-atb node) fmtr-node))
          (get-output-bytes o))
  )

(define (subgraph->bytes sg fmtrs)
  (define name (let [
                     (sg-name (subgraph-name sg))
                     ]
                 (if (null? sg-name)
                     ""
                     (symbol->string sg-name)
                     )
                 )
    )
  (let [
        (fourspaces (string->bytes/locale "    "))
        ]
    (bytes-append (let ([o (open-output-bytes)])
                  (fprintf o "    subgraph ~s {\n" name)
                  (get-output-bytes o))
                 (let ([o (open-output-bytes)])
                  (fprintf o  "        ~a;\n" (hash->bytes (subgraph-atb sg) (formatters-graph-hash fmtrs) ";\n        "))
                  (get-output-bytes o))
                 (foldl (lambda (n a) (bytes-append a fourspaces (node->bytes n (formatters-node-hash fmtrs))))
                        #""
                        (subgraph-node-list sg))
                 (foldl (lambda (e a) (bytes-append a fourspaces (edge->bytes e (formatters-edge-hash fmtrs))))
                        #""
                        (subgraph-edge-list sg))
                 (foldl (lambda (e a) (bytes-append a fourspaces (subgraph->bytes e fmtrs)))
                        #""
                        (subgraph-subgraph-list sg))
                 (string->bytes/locale "    }\n")
                 )
    )
  )

(define (graph->bytes g)
  (define name (let ([o (open-output-bytes)])
                  (fprintf o "digraph ~s {\n" (graph-name g))
                  (get-output-bytes o))
  )

  (define fmtrs (graph-fmtrs g))
  (bytes-append
   name
   (let ([o (open-output-bytes)])
     (fprintf o "    ~a;\n" (hash->bytes (graph-atb g) (formatters-graph-hash fmtrs) ";\n    "))
     (get-output-bytes o))
   (foldl (lambda (n a) (bytes-append a (node->bytes n (formatters-node-hash fmtrs))))
          #""
          (graph-node-list g))
   (foldl (lambda (e a) (bytes-append a (edge->bytes e (formatters-edge-hash fmtrs))))
          #""
          (graph-edge-list g))
   (foldl (lambda (e a) (bytes-append a (subgraph->bytes e fmtrs)))
          #""
          (graph-subgraph-list g))
   (string->bytes/locale "}")
   )
  )

(define (graph->dot-bytes graph save-dir filename)
  (define dot-path (build-path save-dir (format "~a.dot" filename)))
  (define dotfile (open-output-file #:exists 'replace dot-path))
  (write-bytes (graph->bytes graph) dotfile)
  (close-output-port dotfile)
  dot-path
  )