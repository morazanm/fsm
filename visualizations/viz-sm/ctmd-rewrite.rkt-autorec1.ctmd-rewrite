#lang racket/base

(require syntax-spec-v3
         "../../fsm-core/private/tm.rkt"
         "../../fsm-core/private/constants.rkt"
         (for-syntax syntax/parse racket/base
                     )
         
         (for-meta 2  syntax/parse racket/base "ctmd-helpers.rkt")
         (for-meta 1  "ctmd-helpers.rkt")
         (for-meta 0 "ctmd-helpers.rkt")
         #;(for-meta -1 "ctmd-helpers.rkt")
         syntax/parse/experimental/template
         syntax/parse
         )

(provide new-combine-tms)

(struct ctm (ctm-obj ctm-lst))

(define-syntax (process-ctmd-expr stx)
  (define-syntax-class goto-expr
    (pattern ((~datum GOTO) a-label)
      #:attr label #'a-label))

  (define-syntax-class var-set-expr
    (pattern (((~datum VAR) a-symbol:expr) a-body:expr)
      #:attr symb #'a-symbol
      #:attr body #'a-body))

  (define-syntax-class label-expr
    (pattern ((~datum LABEL) num:expr)
      #:attr label #'num))

  (define-syntax-class branch-path-expr
    (pattern (val:expr a-jmp:goto-expr)
      #:attr match #'val
      #:attr goto #'a-jmp))
  
  (syntax-parse stx
    [(_ a-goto:goto-expr)
     #'(list GOTO a-goto.label)]
    [(_ a-var-set:var-set-expr)
     #'(list (list VAR a-var-set.symb) (process-ctmd-expr a-var-set.body))]
    [(_ a-label-expr:label-expr)
     #'a-label-expr.label]
    [(_ ((~datum BRANCH) (a-path:branch-path-expr ...)))
     #'(list BRANCH
             (list a-path.match (process-ctmd-expr a-path.goto))
             ...)]
    [(_ e:expr)
     #'e]))

(define-syntax (make-ctm-lst stx)
  (syntax-parse stx
    [(_ e:expr ...)
     #'(list (process-ctmd-expr e) ...)]))

(define-syntax compile
  (syntax-parser
    #:datum-literals (GOTO VAR BRANCH LABEL USE combine-tms)
    [(_ (e:expr ...) alphabet:expr)
     #'(displayln (list #'e ...))#;(let ([ctm-lst (make-ctm-lst e ...)])
         
         (combine-tms ctm-lst alphabet)#;(ctm (combine-tms ctm-lst alphabet) ctm-lst))]))

(syntax-spec
 (binding-class top-level-label)
 (binding-class variable)
 #;(nonterminal goto-expr
              #:binding-space ctmd
              (~> ((~datum list) (~datum GOTO) e:expr)
                  #'(GOTO e))
              ((~datum GOTO) a-label:top-level-label))
 #;(nonterminal var-set-expr
              #:binding-space ctmd
              (~> (((~datum list) (~datum VAR) symb:expr) e:expr ...)
                  #'((VAR symb) e ...))
              (((~datum VAR) a-symbol:variable) c0:ctmd-expr ...)
              #:binding (scope (bind a-symbol) c0 ...))
 #;(nonterminal/exporting top-level-label-expr
                        #:binding-space ctmd
                        ((~datum LABEL) num:top-level-label)
                        #:binding (export num))
 #;(nonterminal branch-path-expr
              #:binding-space ctmd
              (~> ((~datum list) val:expr e:expr)
                  #'(val e))
              (val:expr a-jmp:goto-expr))
 #;(nonterminal branch-expr
              #:binding-space ctmd
              ((~datum BRANCH) (paths:branch-path-expr ...)))
 (nonterminal ctmd-expr
              #:binding-space ctmd
              (~> ((~datum list) e:expr ...)
                  #'(e ...))
              (~> ((~datum cons) e:expr ...)
                  #'(e ...))
              (~> ((~datum list) (~datum GOTO) e:expr)
                  #'(GOTO e))
              (~> (((~datum list) (~datum VAR) ((~datum quote) symb)) e:expr ...)
                  #'((VAR symb) e ...))
              (~> ((~datum BRANCH) ((~datum list) ((~datum list) val:expr ((~datum list) (~datum GOTO) a-label:expr)) ...))
                  #'(BRANCH ((val (GOTO a-label)) ...)))
              (~> ((~datum quote) a:expr)
                  #'(USE a))
              
              ((~datum GOTO) a-label:top-level-label)
              
              (((~datum VAR) a-symbol:variable) c0:ctmd-expr ...)
              #:binding (scope (bind a-symbol) c0 ...)
              
              ((~datum BRANCH) ((val:expr ((~datum GOTO) e:top-level-label)) ...))
              
              ((~datum USE) val:variable)
              a-tm:expr)
 
 (nonterminal/exporting ctmd-expr-or-top-lvl-label
                        #:binding-space ctmd
                        (~> n:number
                            #'(LABEL n))
                        ((~datum LABEL) num:top-level-label)
                        #:binding (export num)
                        a-ctmd:ctmd-expr)
 
 (host-interface/expression
  (_new-combine-tms (a-ctmd-expr:ctmd-expr-or-top-lvl-label ...) alphabet:expr)
  #:binding (scope (import a-ctmd-expr) ...)
  #'(compile (a-ctmd-expr ...) alphabet)))

(define-syntax (combine-tms-prepass-helper stx)
  (syntax-parse stx
    [(_ ((~or (~datum cons) (~datum list))
         e ...))
     #'((combine-tms-prepass-helper e) ...)
     ]
    [(_ n:number)
     #'n]
    [(_ e:expr)
     #'#f]
    ))

#;(define-syntax (combine-tms-prepass/1 stx)
  (displayln stx)
  (syntax-parser
    [(_ n:number)
     #''(n)]
    [(_ ((~datum cons)
         e ...))
     #``(,@(combine-tms-prepass/1 e) ...)
     
     ]
    [(_ ((~datum list)
         e ...))
     #``(,@(combine-tms-prepass/1 e) ...)]
    [(_ ((~datum quote) (e ...)))
        #``(,@(combine-tms-prepass/1 e) ...)]
    [(_ e:expr)
     #''(#f)]))



(define-syntax (prepass stx)
  (syntax-parse stx
    [(_ elem)
     #;(let* ([res (combine-tms-prepass/1 #'elem)]
            [test0 (println res)]
            #;[res0 (combine-tms-prepass/2 res)]
            #;[test1 (println res0)])
       #'(void))
       
     (let-values ([(res o-res) (syntax-local-expand-expression #'elem)])
       #`'(#,(combine-tms-prepass/1 res)))]))
(prepass (list 1 '(2 a) 'b))
#;(println (prepass (list 1 '(2 a) 'b))
         #;(combine-tms-prepass/2 (combine-tms-prepass/1 (list 1 '(2 a) 'b))))
#|
(define-syntax (test1 stx)
  (syntax-parse stx
    [(_ n:number)
     #''(n)]))
(define-syntax (test0 stx)
  (syntax-parse stx
    [(_ ((~datum quote) (e)))
     (displayln stx)
     #'(test1 e)]))
|#
;(test0 '(2))

#;(define-syntax (combine-tms-prepass/2 stx)
  (displayln stx)
  (syntax-parse stx
    [(_ ((~datum quote) ((~or* n:number b:boolean) ...)))
     #'(n ...)]
    [(_ ((~datum list) (~or* n:number b:boolean) ...))
     #'(n ...)]
     ))

(define-syntax (new-combine-tms stx)
  (syntax-parse stx
    [(_ ((~datum list) e:expr ...) alphabet:expr)
     #'(_new-combine-tms (combine-tms-prepass/2 (combine-tms-prepass/1 stx)) (e ...) alphabet)]
    [(_ (e:expr ...) alphabet:expr)
     #'(_new-combine-tms (combine-tms-prepass/2 (combine-tms-prepass/1 stx)) (e ...) alphabet)]))
#|
(define-syntax (combine-tms-prepass stx)
  (syntax-parse stx
    [(_ ((~datum list) e:expr ...) alphabet:expr)
     #'(_new-combin
|#