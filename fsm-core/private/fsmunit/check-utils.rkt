#lang racket/base

(require racket/contract/base
         racket/list)

(provide (all-defined-out))

;; flat-contract (Listof Any) (Listof Syntax) -> (Listof (List Word Syntax))
;; Returns a list of any value and their syntax if they fail the given contract check
(define (accumulate-invalid-words contract word-lst word-stx-lst)
  (foldr (lambda (w w-stx accum)
           (if (contract w)
               accum
               (cons (list w w-stx) accum)))
         '()
         word-lst
         word-stx-lst))

;; dependent-flat-contract (Listof Any) (Listof Syntax) (Listof Any) -> (Listof (List Word Syntax))
;; Returns a list of any value and their syntax if they fail their respective created contract
(define (accumulate-invalid-words-dep contract-builder word-lst word-stx-lst . deps)
  (let* ([contracts (apply contract-builder deps)])
    (foldr (lambda (w w-stx contract accum)
           (if (contract w)
               accum
               (cons (list w w-stx) accum)))
         '()
         word-lst
         word-stx-lst
         contracts)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TURING MACHINE CONTRACTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; use ~or to have different highlighting for expressions that evaluate to list/number vs literal lists
;; 4 cases: one expression to be evauluated, two expressions to be evaluated, literal list and expression, expression and head pos

(define valid-test-case/c (listof symbol?))

;; tm test case error precedence
;; Need to raise errors in this order because of likelihood caught issue means errors lower in priority were caused by caught error
;; 1. Incorrect arity -- All bets are off on anything being correct
;; 2. NaN head position(s) -- Very likely creation of list was incorrect
;; NOTE: Order precedence of these are unimportant, just need to be below level 1 and 2
;; 3.0 Non-natural number head position -- Possibly incorrect number is being generated by expression OR user has mistyped
;; 3.1 Missing left hand marker(s) -- Possibly incorrect word is being generated by expression OR user has mistyped
;; 3.2 Invalid word element(s) -- Possibly incorrect word is being generated by expression OR user has mistyped

(define correct-tm-word-arity/c (list/c any/c any/c))
(define nan-head-position/c number?)
(define valid-head-pos/c exact-nonnegative-integer?)
(define valid-tm-word/c (cons/c '@ (listof any/c)))

(define valid-tm-test-case/c (list/c valid-tm-word/c valid-head-pos/c))