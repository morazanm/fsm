#lang racket

(require "./cfexp-playground.rkt"
         "../fsm-core/private/pda.rkt"
         "../fsm-core/private/cfg.rkt"
         "../fsm-core/private/constants.rkt"
         "./context-free-expressions-constructors.rkt"
         rackunit
         )

(define WORD-AMOUNT 100)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Generating Words;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;cfe natnum -> (listof word)
;;Purpose: Generates at MOST natnum amount of words generated by the given cfe
(define (gen-cfe-words cfe a-num)
  ;; (setof word) -> (setof word)
  ;;Purpose: Generates a natnum amount of generated words
  (define (loopinator-helper acc)
    (if (= (set-count acc) a-num)
        acc
        (loopinator-helper (set-add acc (gen-cfexp-word cfe)))))
  (set->list (loopinator-helper (set))))


;;cfg cfexp -> boolean
;;Purpose: Determines if the given cfe can generate a natnum amount of words that the grammar can derive
(define (grammar-checker g words)
  (for/and ([w (in-list words)])
    (list? (cfg-derive g (if (eq? w EMP) '() w)))))

;;pda cfexp -> boolean
;;Purpose: Determines if the given cfe can generate a natnum amount of words that the pda can accept
(define (pda-checker p words)
  (for/and ([w (in-list words)])
    (eq? (apply-pda p (if (eq? w EMP) '() w)) 'accept)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Langauge Predicates;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = ww^r
(define (valid-wwr-word? w)
  (or (eq? w EMP)
      (let* ([w-length (length w)]
             [half-w (take w (/ w-length 2))]
             [w^r (drop w (/ w-length 2))])
        (and (even? w-length)
             (equal? w (append half-w w^r))
             (equal? (reverse half-w) w^r)
             (equal? half-w (reverse w^r))))))

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = a^nb^n
(define (valid-anbn-word? w)
  (or (eq? w EMP)
      (let ([as (filter (λ (s) (eq? s 'a)) w)]
            [bs (filter (λ (s) (eq? s 'b)) w)])
        (and (even? (length w))
             (equal? w (append as bs))
             (= (length as) (length bs))))))

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = b^na^n
(define (valid-bnan-word? w)
  (or (eq? w EMP)
      (let ([as (filter (λ (s) (eq? s 'a)) w)]
            [bs (filter (λ (s) (eq? s 'b)) w)])
        (and (even? (length w))
             (equal? w (append bs as))
             (= (length as) (length bs))))))

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = a^2ib^i
(define (valid-a2ibi-word? w)
  (or (eq? w EMP)
      (let ([as (filter (λ (s) (eq? s 'a)) w)]
            [bs (filter (λ (s) (eq? s 'b)) w)])
        (and (equal? w (append as bs))
             (= (length as) (* 2 (length bs)))))))

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = A^iB^j | i <= j <= 2i
(define (valid-aibj-word? w)
  (or (eq? w EMP)
      (let ([as (filter (λ (s) (eq? s 'a)) w)]
            [bs (filter (λ (s) (eq? s 'b)) w)])
        (and (equal? w (append as bs))
             (<= (length as) (length bs) (* 2 (length as)))))))

;;word -> boolean
;;Purpose: Determines if the given word is a valid word for w = a*
(define (valid-A*-word? a-word)
  (or (eq? a-word EMP)
      (andmap (λ (w) (eq? w 'a)) a-word)))

(define (valid-Gina-aˆnbˆn-word? ci)
  (let* [(as (takef ci (λ (s) (eq? s 'a))))
         (bs (takef (drop ci (length as))
                    (λ (s) (eq? s 'b))))]
    (and (equal? (append as bs) ci)
         (= (length as) (length bs)))))

(define (valid-Gina-wcwˆr-word? ci)
  (let* [(w (takef ci (λ (s) (not (eq? s 'c)))))]
    (equal? ci (append w (list 'c) (reverse w)))))

(define (valid-Gina-palindrome-pda-word? ci)
  (or (empty? ci)
      (equal? ci (reverse ci))))

(define (valid-Gina-AiBj-word? ci)
  (let* [(As (takef ci (λ (x) (eq? x 'a))))
         (Bs (takef (drop ci (length As)) (λ (x) (eq? x 'b))))]
    (and (<= (length As) (length Bs) (* 2 (length As)))
         (equal? ci (append As Bs)))))

(define (valid-Gina-A^nB^mA^n-word? ci)
  (let* [(As (takef ci (λ (x) (eq? x 'a))))
         (Bs (takef (drop ci (length As)) (λ (x) (eq? x 'b))))
         (As-after-Bs (takef (drop ci (length (append As Bs))) (λ (x) (eq? x 'a))))]
    (or (and (equal? ci As)
             (even? (length As))) 
        (and (= (- (length As) (length As-after-Bs)) 0) 
             (equal? (append As Bs As-after-Bs) ci)))))

(define (valid-Gina-a^mb^nc^pd^q-word? ci stack)
  (let* [(As (takef ci (λ (x) (eq? x 'a))))
         (Bs (takef (drop ci (length As)) (λ (x) (eq? x 'b))))
         (Cs (takef (drop ci (+ (length As) (length Bs))) (λ (x) (eq? x 'c))))
         (Ds (takef (drop ci (+ (length As) (length Bs) (length Cs))) (λ (x) (eq? x 'd))))]
    (and (equal? (append As Bs Cs Ds) ci)
         (andmap (λ (x) (eq? x 'a)) stack)
         (= 0 (- (+ (length As) (length Bs)) (length Cs) (length Ds))))))

(define (valid-Gina-a^mb^nc^p-word? ci)
  (let* [(As (takef ci (λ (x) (eq? x 'a))))
         (Bs (takef (drop ci (length As)) (λ (x) (eq? 'b x))))
         (Cs (takef (drop ci (+ (length As) (length Bs))) (λ (x) (eq? 'c x))))]
    (and (equal? ci (append As Bs Cs))
         (or (= 0 (- (length Bs) (length Cs)))
             (= 0 (- (length As) (length Bs)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;LANGUAGE BANK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define WWR-WORDS (gen-cfe-words WWR WORD-AMOUNT))

(define ANBN-WORDS (gen-cfe-words ANBN WORD-AMOUNT))

(define BNAN-WORDS (gen-cfe-words BNAN WORD-AMOUNT))

(define A2iBi-WORDS (gen-cfe-words A2iBi WORD-AMOUNT))

(define AiBj-WORDS (gen-cfe-words AiBj WORD-AMOUNT))

(define TRANSFORMED-ANBN-WORDS (gen-cfe-words transformed-anbn WORD-AMOUNT))

(define TRANSFORMED-BNAN-WORDS (gen-cfe-words (cfg->cfe (cfe->cfg BNAN)) WORD-AMOUNT))

(define TRANSFORMED-WWR-WORDS (gen-cfe-words (cfg->cfe (cfe->cfg WWR)) WORD-AMOUNT))

(define TRANSFORMED-AiBj-WORDS (gen-cfe-words (cfg->cfe (cfe->cfg AiBj)) WORD-AMOUNT))

(define TRANSFORMED-A2iBi-WORDS (gen-cfe-words (cfg->cfe (cfe->cfg A2iBi)) WORD-AMOUNT))

(define thesis-cfg-converted-WORDS (gen-cfe-words thesis-cfg-converted WORD-AMOUNT))

(define thesis-cfe-WORDS (gen-cfe-words thesis-cfe WORD-AMOUNT))

(define A*-WORDS (gen-cfe-words A*-cfe WORD-AMOUNT))
#|
(define Gina-aˆnbˆn-WORDS (gen-cfe-words Gina-aˆnbˆn-cfe WORD-AMOUNT))

(define Gina-wcwˆr-WORDS (gen-cfe-words Gina-wcwˆr-cfe WORD-AMOUNT))

(define Gina-palindrome-pda-WORDS (gen-cfe-words Gina-palindrome-pda-cfe WORD-AMOUNT))

(define Gina-AiBj-WORDS (gen-cfe-words Gina-AiBj-cfe WORD-AMOUNT))

(define Gina-A^nB^mA^n-WORDS (gen-cfe-words Gina-A^nB^mA^n-cfe WORD-AMOUNT))

(define Gina-a^mb^nc^pd^q-WORDS (gen-cfe-words Gina-a^mb^nc^pd^q-cfe WORD-AMOUNT))

(define Gina-a^mb^nc^p-WORDS (gen-cfe-words Gina-a^mb^nc^p-cfe WORD-AMOUNT))
|#
(define converted-ANBN-WORDS (gen-cfe-words converted-ANBN WORD-AMOUNT))

(define converted-BNAN-WORDS (gen-cfe-words (pda->cfe (cfe->pda BNAN)) WORD-AMOUNT))

(define converted-WWR-WORDS (gen-cfe-words (pda->cfe (cfe->pda WWR)) WORD-AMOUNT))

(define converted-A2iBi-WORDS (gen-cfe-words (pda->cfe (cfe->pda A2iBi)) WORD-AMOUNT))

(define converted-AiBj-WORDS (gen-cfe-words (pda->cfe (cfe->pda AiBj)) WORD-AMOUNT))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TESTING;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(check-pred (λ (low) (andmap valid-A*-word? low)) A*-WORDS)

(check-pred (λ (low) (andmap valid-anbn-word? low)) converted-ANBN-WORDS)

(check-pred (λ (low) (andmap valid-bnan-word? low)) converted-BNAN-WORDS)

(check-pred (λ (low) (andmap valid-wwr-word? low)) converted-WWR-WORDS)

(check-pred (λ (low) (andmap valid-a2ibi-word? low)) converted-A2iBi-WORDS)

(check-pred (λ (low) (andmap valid-aibj-word? low)) converted-AiBj-WORDS)
#|
(check-pred (λ (low) (andmap valid-Gina-aˆnbˆn-word? low)) Gina-aˆnbˆn-WORDS) 

(check-pred (λ (low) (andmap valid-Gina-wcwˆr-word? low)) Gina-wcwˆr-WORDS)

(check-pred (λ (low) (andmap valid-Gina-palindrome-pda-word? low)) Gina-palindrome-pda-WORDS)

(check-pred (λ (low) (andmap valid-Gina-AiBj-word? low)) Gina-AiBj-WORDS)

(check-pred (λ (low) (andmap valid-Gina-A^nB^mA^n-word? low)) Gina-A^nB^mA^n-WORDS)

(check-pred (λ (low) (andmap valid-Gina-a^mb^nc^pd^q-word? low)) Gina-a^mb^nc^pd^q-WORDS)

(check-pred (λ (low) (andmap valid-Gina-a^mb^nc^p-word? low)) Gina-a^mb^nc^p-WORDS)
|#
(check-true (pda-checker (cfe->pda ANBN) converted-ANBN-WORDS))

(check-true (pda-checker (cfe->pda BNAN) converted-BNAN-WORDS))

(check-true (pda-checker (cfe->pda AiBj) converted-AiBj-WORDS))

(check-true (pda-checker (cfe->pda A2iBi) converted-A2iBi-WORDS))

(check-true (pda-checker (cfe->pda WWR) converted-WWR-WORDS))
#|
(check-true (pda-checker Gina-aˆnbˆn Gina-aˆnbˆn-WORDS))

(check-true (pda-checker Gina-wcwˆr Gina-wcwˆr-WORDS))

(check-true (pda-checker Gina-palindrome-pda Gina-palindrome-pda-WORDS))

(check-true (pda-checker Gina-AiBj Gina-AiBj-WORDS))

(check-true (pda-checker Gina-A^nB^mA^n Gina-A^nB^mA^n-WORDS))

(check-true (pda-checker Gina-a^mb^nc^pd^q Gina-a^mb^nc^pd^q-WORDS))

(check-true (pda-checker Gina-a^mb^nc^p Gina-a^mb^nc^p-WORDS))

(check-true (pda-checker (cfe->pda Gina-aˆnbˆn-cfe) Gina-aˆnbˆn-WORDS))

(check-true (pda-checker (cfe->pda Gina-wcwˆr-cfe) Gina-wcwˆr-WORDS))

(check-true (pda-checker (cfe->pda Gina-palindrome-pda-cfe) Gina-palindrome-pda-WORDS))

(check-true (pda-checker (cfe->pda Gina-AiBj-cfe) Gina-AiBj-WORDS))

(check-true (pda-checker (cfe->pda Gina-A^nB^mA^n-cfe) Gina-A^nB^mA^n-WORDS))

(check-true (pda-checker (cfe->pda Gina-a^mb^nc^pd^q-cfe) Gina-a^mb^nc^pd^q-WORDS))

(check-true (pda-checker (cfe->pda Gina-a^mb^nc^p-cfe) Gina-a^mb^nc^p-WORDS))
|#

(check-pred (λ (low) (andmap valid-wwr-word? low)) WWR-WORDS)

(check-pred (λ (low) (andmap valid-anbn-word? low)) ANBN-WORDS)

(check-pred (λ (low) (andmap valid-bnan-word? low)) BNAN-WORDS)

(check-pred (λ (low) (andmap valid-a2ibi-word? low)) A2iBi-WORDS)

(check-pred (λ (low) (andmap valid-aibj-word? low)) AiBj-WORDS)

(check-pred (λ (low) (andmap valid-anbn-word? low)) TRANSFORMED-ANBN-WORDS)

(check-pred (λ (low) (andmap valid-bnan-word? low)) TRANSFORMED-BNAN-WORDS)

(check-pred (λ (low) (andmap valid-wwr-word? low)) TRANSFORMED-WWR-WORDS)

(check-pred (λ (low) (andmap valid-a2ibi-word? low)) TRANSFORMED-A2iBi-WORDS)

(check-pred (λ (low) (andmap valid-aibj-word? low)) TRANSFORMED-AiBj-WORDS)

(check-true (grammar-checker thesis-cfg1 thesis-cfg-converted-WORDS))

(check-true (grammar-checker thesis-cfe-converted thesis-cfe-WORDS))

(check-true (grammar-checker (cfe->cfg ANBN) TRANSFORMED-ANBN-WORDS))

(check-true (grammar-checker (cfe->cfg BNAN) TRANSFORMED-BNAN-WORDS))

(check-true (grammar-checker (cfe->cfg AiBj) TRANSFORMED-AiBj-WORDS))

(check-true (grammar-checker (cfe->cfg A2iBi) TRANSFORMED-A2iBi-WORDS))

(check-true (grammar-checker (cfe->cfg WWR) TRANSFORMED-WWR-WORDS))

(define test (union-cfexp ANBN BNAN))